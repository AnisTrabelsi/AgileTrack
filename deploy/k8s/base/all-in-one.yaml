# =====================================================================
# DevOpsTrack — All-in-one (Namespace, ConfigMap, Deployments, Services, Traefik CRDs)
# Namespace : devopstrack
# Pré-requis installés via Helm (bitnami/*) :
#   - MongoDB   : Service  -> projects-db-mongodb
#   - Redis     : Service  -> tasks-redis-master
#   - InfluxDB2 : Service  -> metrics-db-influxdb2   (si metrics utilisé)
# Images      : ghcr.io/anistrabelsi/* (+ image-pull-ghcr si besoin)
# Traefik     : utilise les CRD v3 -> apiVersion: traefik.io/v1alpha1
# =====================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: devopstrack
---
apiVersion: v1
kind: Secret
metadata:
  name: devopstrack-app-secrets
  namespace: devopstrack
type: Opaque
stringData:
  # ⚠️ Remplacer en prod
  JWT_SECRET: super-secret-dev-key
  INFLUXDB_TOKEN: dev-token

# -------------------- Frontend (Nginx + placeholder) --------------------
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-index
  namespace: devopstrack
data:
  index.html: |
    <!doctype html>
    <html>
      <head>
        <meta charset="utf-8"/>
        <title>DevOpsTrack Frontend (placeholder)</title>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <style>
          body { font-family: system-ui, sans-serif; max-width: 800px; margin: 4rem auto; line-height: 1.5; }
          code,kbd { background: #f6f8fa; padding: .1rem .3rem; border-radius: .25rem; }
          a { text-decoration: none; }
        </style>
      </head>
      <body>
        <h1>Frontend de test</h1>
        <p>Traefik route <code>/</code> sur ce frontend, <code>/projects</code> sur FastAPI, <code>/tasks</code> sur Node.</p>
        <ul>
          <li><a href="/projects/docs">Swagger Projects</a></li>
          <li><a href="/tasks/health">Tasks /health</a></li>
        </ul>
      </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: devopstrack
  labels: { app.kubernetes.io/name: frontend }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: frontend }
  template:
    metadata:
      labels: { app.kubernetes.io/name: frontend }
    spec:
      containers:
        - name: web
          image: nginx:1.27-alpine
          imagePullPolicy: IfNotPresent
          ports: [ { containerPort: 80 } ]
          volumeMounts:
            - name: html
              mountPath: /usr/share/nginx/html/index.html
              subPath: index.html
          readinessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 3
          livenessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 10
      volumes:
        - name: html
          configMap: { name: frontend-index }
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: frontend }
  ports:
    - name: http
      port: 80
      targetPort: 80
  type: ClusterIP

# -------------------- Projects (FastAPI) --------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: projects-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: projects-service }
spec:
  replicas: 2
  selector:
    matchLabels: { app.kubernetes.io/name: projects-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: projects-service }
    spec:
      # imagePullSecrets:
      #   - name: image-pull-ghcr
      containers:
        - name: projects
          image: ghcr.io/anistrabelsi/projects-service:latest
          imagePullPolicy: IfNotPresent
          ports: [ { containerPort: 8001 } ]
          env:
            - name: MONGO_URL
              value: mongodb://projects-db-mongodb:27017
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: JWT_SECRET } }
            # IMPORTANT : pour servir sous /projects via Traefik (stripPrefix)
            - name: UVICORN_CMD_ARGS
              value: "--root-path /projects"
          readinessProbe:
            tcpSocket: { port: 8001 }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 8001 }
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: projects-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: projects-service }
  ports:
    - name: http
      port: 8001
      targetPort: 8001
  type: ClusterIP

# -------------------- Tasks (Node API + Worker) --------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: tasks-service }
spec:
  replicas: 2
  selector:
    matchLabels: { app.kubernetes.io/name: tasks-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: tasks-service }
    spec:
      # imagePullSecrets:
      #   - name: image-pull-ghcr
      containers:
        - name: tasks-api
          image: ghcr.io/anistrabelsi/tasks-service:latest
          imagePullPolicy: IfNotPresent
          command: ["node", "src/server.js"]
          ports: [ { containerPort: 8002 } ]
          env:
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: JWT_SECRET } }
            - name: REDIS_URL
              value: redis://tasks-redis-master:6379
          readinessProbe:
            tcpSocket: { port: 8002 }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 8002 }
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: tasks-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: tasks-service }
  ports:
    - name: http
      port: 8002
      targetPort: 8002
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-worker
  namespace: devopstrack
  labels: { app.kubernetes.io/name: tasks-worker }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: tasks-worker }
  template:
    metadata:
      labels: { app.kubernetes.io/name: tasks-worker }
    spec:
      # imagePullSecrets:
      #   - name: image-pull-ghcr
      containers:
        - name: worker
          image: ghcr.io/anistrabelsi/tasks-service:latest
          imagePullPolicy: IfNotPresent
          command: ["node", "src/worker.js"]
          env:
            - name: REDIS_URL
              value: redis://tasks-redis-master:6379
          resources:
            requests: { cpu: "50m", memory: "64Mi" }
            limits:   { cpu: "300m", memory: "256Mi" }

# -------------------- Metrics (optionnel) --------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: metrics-service }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: metrics-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: metrics-service }
    spec:
      # imagePullSecrets:
      #   - name: image-pull-ghcr
      containers:
        - name: metrics
          image: ghcr.io/anistrabelsi/metrics-service:latest
          imagePullPolicy: IfNotPresent
          ports: [ { containerPort: 9100 } ]
          env:
            - name: INFLUXDB_URL
              value: http://metrics-db-influxdb2:8086
            - name: INFLUXDB_ORG
              value: devopstrack
            - name: INFLUXDB_BUCKET
              value: metrics
            - name: INFLUXDB_TOKEN
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: INFLUXDB_TOKEN } }
          readinessProbe:
            tcpSocket: { port: 9100 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: 9100 }
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests: { cpu: "50m", memory: "64Mi" }
            limits:   { cpu: "300m", memory: "256Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: metrics-service }
  ports:
    - name: http
      port: 9100
      targetPort: 9100
  type: ClusterIP

# -------------------- Traefik Middlewares + IngressRoute (v3) --------------------
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: strip-projects
  namespace: devopstrack
spec:
  stripPrefix:
    prefixes: ["/projects"]
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: strip-tasks
  namespace: devopstrack
spec:
  stripPrefix:
    prefixes: ["/tasks"]
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: devopstrack
  namespace: devopstrack
spec:
  entryPoints: ["web"]
  routes:
    - kind: Rule
      match: "Host(`devopstrack.127.0.0.1.nip.io`) && PathPrefix(`/projects`)"
      middlewares: [{ name: strip-projects }]
      services: [{ name: projects-service, port: 8001 }]
    - kind: Rule
      match: "Host(`devopstrack.127.0.0.1.nip.io`) && PathPrefix(`/tasks`)"
      middlewares: [{ name: strip-tasks }]
      services: [{ name: tasks-service, port: 8002 }]
    - kind: Rule
      match: "Host(`devopstrack.127.0.0.1.nip.io`) && (Path(`/`) || Path(`/index.html`))"
      priority: 1
      services: [{ name: frontend, port: 80 }]

# -------------------- Traefik Dashboard (via api@internal) --------------------
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: dashboard-strip
  namespace: kube-system
spec:
  stripPrefix:
    prefixes: ["/dashboard"]
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: kube-system
spec:
  entryPoints:
    - web
  routes:
    - match: "Host(`devopstrack.127.0.0.1.nip.io`) && PathPrefix(`/dashboard`)"
      kind: Rule
      middlewares:
        - name: dashboard-strip
      services:
        - kind: TraefikService
          name: api@internal
