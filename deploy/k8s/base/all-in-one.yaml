##############################################################################
# DevOpsTrack ‚Äì¬†All‚Äëin‚Äëone¬†(v2025‚Äë07)   HTTPS ready (Traefik¬†v3¬†+¬†Let‚Äôs¬†Encrypt)
# LoadBalancer DNS : ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com
##############################################################################

############################
# üåê  Namespace & Secrets  #
############################
apiVersion: v1
kind: Namespace
metadata:
  name: devopstrack
---
apiVersion: v1
kind: Secret
metadata:
  name: devopstrack-app-secrets
  namespace: devopstrack
type: Opaque
stringData:
  JWT_SECRET: super-secret-dev-key        # ‚á¢ remplace en production
  INFLUXDB_TOKEN: dev-token

############################
# üåç  Frontend (placeholder)
############################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-index
  namespace: devopstrack
data:
  index.html: |
    <!doctype html><html><head><meta charset="utf-8"/>
    <title>DevOpsTrack Frontend</title>
    <meta name="viewport" content="width=device-width,initial-scale=1"/>
    <style>body{font-family:system-ui,sans-serif;max-width:800px;margin:4rem auto;line-height:1.5}</style>
    </head><body>
    <h1>DevOpsTrack ‚Äì¬†Frontend (placeholder)</h1>
    <p>Routes¬†:</p><ul>
      <li><code>/auth</code> ‚Üí Django¬†API</li>
      <li><code>/projects</code> ‚Üí FastAPI</li>
      <li><code>/tasks</code> ‚Üí Node¬†API</li>
    </ul></body></html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: devopstrack
  labels: { app.kubernetes.io/name: frontend }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: frontend }
  template:
    metadata:
      labels: { app.kubernetes.io/name: frontend }
    spec:
      containers:
        - name: web
          image: nginx:1.27-alpine
          ports: [{ containerPort: 80 }]
          volumeMounts:
            - name: html
              mountPath: /usr/share/nginx/html/index.html
              subPath: index.html
          readinessProbe: { httpGet: { path: /, port: 80 }, initialDelaySeconds: 3 }
          livenessProbe:  { httpGet: { path: /, port: 80 }, initialDelaySeconds: 10 }
      volumes:
        - name: html
          configMap: { name: frontend-index }
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: frontend }
  ports: [{ name: http, port: 80, targetPort: 80 }]
  type: ClusterIP

############################
# üîê  Auth‚Äëservice (Django)
############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: auth-service }
spec:
  replicas: 2
  selector:
    matchLabels: { app.kubernetes.io/name: auth-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: auth-service }
    spec:
      containers:
        - name: auth
          image: ghcr.io/anistrabelsi/auth-service:latest
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 8000 }]
          env:
            - name: DATABASE_URL
              value: postgres://postgres:postgres@auth-db-postgresql:5432/auth
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: JWT_SECRET } }
          readinessProbe: { tcpSocket: { port: 8000 }, initialDelaySeconds: 10 }
          livenessProbe:  { tcpSocket: { port: 8000 }, initialDelaySeconds: 30 }
          resources:
            requests: { cpu: 100m, memory: 128Mi }
            limits:   { cpu: 500m, memory: 512Mi }
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: auth-service }
  ports: [{ name: http, port: 8000, targetPort: 8000 }]
  type: ClusterIP

############################
# üì¶  Projects‚Äëservice
############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: projects-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: projects-service }
spec:
  replicas: 2
  selector:
    matchLabels: { app.kubernetes.io/name: projects-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: projects-service }
    spec:
      containers:
        - name: projects
          image: ghcr.io/anistrabelsi/projects-service:latest
          ports: [{ containerPort: 8001 }]
          env:
            - name: MONGO_URL
              value: mongodb://projects-db-mongodb:27017
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: JWT_SECRET } }
            - name: UVICORN_CMD_ARGS
              value: "--root-path /projects"
          readinessProbe: { tcpSocket: { port: 8001 }, initialDelaySeconds: 10 }
          livenessProbe:  { tcpSocket: { port: 8001 }, initialDelaySeconds: 30 }
          resources:
            requests: { cpu: 100m, memory: 128Mi }
            limits:   { cpu: 500m, memory: 512Mi }
---
apiVersion: v1
kind: Service
metadata:
  name: projects-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: projects-service }
  ports: [{ name: http, port: 8001, targetPort: 8001 }]
  type: ClusterIP

############################
# üõ†Ô∏è  Tasks‚Äëservice (API)
############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: tasks-service }
spec:
  replicas: 2
  selector:
    matchLabels: { app.kubernetes.io/name: tasks-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: tasks-service }
    spec:
      containers:
        - name: tasks-api
          image: ghcr.io/anistrabelsi/tasks-service:latest
          command: ["node","src/server.js"]
          ports: [{ containerPort: 8002 }]
          env:
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: JWT_SECRET } }
            - name: REDIS_URL
              value: redis://tasks-redis-master:6379
          readinessProbe: { tcpSocket: { port: 8002 }, initialDelaySeconds: 10 }
          livenessProbe:  { tcpSocket: { port: 8002 }, initialDelaySeconds: 30 }
          resources:
            requests: { cpu: 100m, memory: 128Mi }
            limits:   { cpu: 500m, memory: 512Mi }
---
apiVersion: v1
kind: Service
metadata:
  name: tasks-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: tasks-service }
  ports: [{ name: http, port: 8002, targetPort: 8002 }]
  type: ClusterIP

############################
# üõ†Ô∏è  Tasks‚Äëworker
############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-worker
  namespace: devopstrack
  labels: { app.kubernetes.io/name: tasks-worker }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: tasks-worker }
  template:
    metadata:
      labels: { app.kubernetes.io/name: tasks-worker }
    spec:
      containers:
        - name: worker
          image: ghcr.io/anistrabelsi/tasks-service:latest
          command: ["node","src/worker.js"]
          env:
            - name: REDIS_URL
              value: redis://tasks-redis-master:6379
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits:   { cpu: 300m, memory: 256Mi }

############################
# üìä  Metrics‚Äëservice
############################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-service
  namespace: devopstrack
  labels: { app.kubernetes.io/name: metrics-service }
spec:
  replicas: 1
  selector:
    matchLabels: { app.kubernetes.io/name: metrics-service }
  template:
    metadata:
      labels: { app.kubernetes.io/name: metrics-service }
    spec:
      containers:
        - name: metrics
          image: ghcr.io/anistrabelsi/metrics-service:latest
          ports: [{ containerPort: 9100 }]
          env:
            - name: INFLUXDB_URL
              value: http://metrics-db-influxdb2:8086
            - name: INFLUXDB_ORG
              value: devopstrack
            - name: INFLUXDB_BUCKET
              value: metrics
            - name: INFLUXDB_TOKEN
              valueFrom: { secretKeyRef: { name: devopstrack-app-secrets, key: INFLUXDB_TOKEN } }
          readinessProbe: { tcpSocket: { port: 9100 }, initialDelaySeconds: 5 }
          livenessProbe:  { tcpSocket: { port: 9100 }, initialDelaySeconds: 20 }
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits:   { cpu: 300m, memory: 256Mi }
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-service
  namespace: devopstrack
spec:
  selector: { app.kubernetes.io/name: metrics-service }
  ports: [{ name: http, port: 9100, targetPort: 9100 }]
  type: ClusterIP

############################
# üö¶  Traefik middlewares
############################
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata: { name: strip-auth, namespace: devopstrack }
spec: { stripPrefix: { prefixes: ["/auth"] } }
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata: { name: strip-projects, namespace: devopstrack }
spec: { stripPrefix: { prefixes: ["/projects"] } }
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata: { name: strip-tasks, namespace: devopstrack }
spec: { stripPrefix: { prefixes: ["/tasks"] } }

############################
# üö™  IngressRoute (HTTPS)
############################
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: devopstrack
  namespace: devopstrack
spec:
  entryPoints: ["web", "websecure"]
  tls:
    certResolver: le
  routes:
    - match: Host(`ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com`) && PathPrefix(`/auth`)
      kind: Rule
      middlewares: [{ name: strip-auth }]
      services:   [{ name: auth-service,     port: 8000 }]
    - match: Host(`ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com`) && PathPrefix(`/projects`)
      kind: Rule
      middlewares: [{ name: strip-projects }]
      services:   [{ name: projects-service, port: 8001 }]
    - match: Host(`ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com`) && PathPrefix(`/tasks`)
      kind: Rule
      middlewares: [{ name: strip-tasks }]
      services:   [{ name: tasks-service,    port: 8002 }]
    - match: Host(`ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com`) && (Path(`/`) || Path(`/index.html`))
      kind: Rule
      priority: 1
      services: [{ name: frontend, port: 80 }]

############################
# üìä  Traefik dashboard
############################
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata: { name: dashboard-strip, namespace: kube-system }
spec: { stripPrefix: { prefixes: ["/dashboard"] } }
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: kube-system
spec:
  entryPoints: ["web", "websecure"]
  tls:
    certResolver: le
  routes:
    - match: Host(`ae8a9ba62fa8e48d6b02c39068b49166-408907621.eu-west-3.elb.amazonaws.com`) && PathPrefix(`/dashboard`)
      kind: Rule
      middlewares: [{ name: dashboard-strip }]
      services:   [{ kind: TraefikService, name: api@internal }]
