# DevOpsTrack – stack locale (Nexus + SonarQube inclus)

services:
  # ─────────────────── PostgreSQL (Auth) ──────────────────────────────
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB:       auth
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks: [devopstrack]

  # ─────────────────── Django : Auth‑Service ──────────────────────────
  auth-service:
    build: { context: ../auth-service }
    # image: 127.0.0.1:8083/docker-ci/auth-service:test2
    container_name: auth-service
    environment:
      DJANGO_SECRET_KEY: super-secret-dev-key
      POSTGRES_DB:       auth
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST:     auth-db
    depends_on:
      auth-db: { condition: service_healthy }
    ports: ["8000:8000"]
    restart: unless-stopped
    networks: [devopstrack]

  # ─────────────────────────── MongoDB ────────────────────────────────
  projects-db:
    image: mongo:6
    container_name: projects-db
    volumes: [ projects-data:/data/db ]
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks: [devopstrack]

  # ───────────── FastAPI Projects‑Service (API) ───────────────────────
  projects-service:
    build: { context: ../projects-service }
    # image: 127.0.0.1:8083/docker-ci/projects-service:test2
    container_name: projects-service
    environment:
      MONGO_URL:  mongodb://projects-db:27017
      JWT_SECRET: super-secret-dev-key
    depends_on:
      projects-db: { condition: service_healthy }
    ports: ["8001:8001"]
    restart: unless-stopped
    networks: [devopstrack]

  # ─────────────────────────── Redis ──────────────────────────────────
  tasks-redis:
    image: redis:7-alpine
    container_name: tasks-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks: [devopstrack]

  # ──────────────── Tasks REST API (Node.js) ──────────────────────────
  tasks-service:
    build: { context: ../tasks-service }
    # image: 127.0.0.1:8083/docker-ci/tasks-service:test2
    container_name: tasks-service
    command: ["node", "src/server.js"]
    environment:
      JWT_SECRET: super-secret-dev-key
      REDIS_URL:  redis://tasks-redis:6379
    depends_on:
      tasks-redis: { condition: service_healthy }
    ports: ["8002:8002"]
    restart: unless-stopped
    networks: [devopstrack]

  # ──────────────── Tasks Worker (background) ─────────────────────────
  tasks-worker:
    build: { context: ../tasks-service }
    # image: 127.0.0.1:8083/docker-ci/tasks-worker:test2
    container_name: tasks-worker
    command: ["node", "src/worker.js"]
    environment:
      REDIS_URL: redis://tasks-redis:6379
    depends_on:
      tasks-redis: { condition: service_healthy }
    restart: unless-stopped
    networks: [devopstrack]

  # ─────────────────────── InfluxDB v2 ────────────────────────────────
  metrics-db:
    image: influxdb:2.7
    container_name: metrics-db
    volumes: [ metrics-data:/var/lib/influxdb2 ]
    environment:
      DOCKER_INFLUXDB_INIT_MODE:        setup
      DOCKER_INFLUXDB_INIT_USERNAME:    admin
      DOCKER_INFLUXDB_INIT_PASSWORD:    admin123
      DOCKER_INFLUXDB_INIT_ORG:         devopstrack
      DOCKER_INFLUXDB_INIT_BUCKET:      metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: dev-token
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      retries: 5
    restart: unless-stopped
    networks: [devopstrack]

  # ───────────── Metrics‑Service (Go + Prometheus) ────────────────────
  metrics-service:
    build: { context: ../metrics-service }
    # image: 127.0.0.1:8083/docker-ci/metrics-service:test2
    container_name: metrics-service
    environment:
      INFLUXDB_URL:    http://metrics-db:8086
      INFLUXDB_ORG:    devopstrack
      INFLUXDB_BUCKET: metrics
      INFLUXDB_TOKEN:  dev-token
    depends_on:
      metrics-db: { condition: service_healthy }
    ports: ["9100:9100"]    # /metrics
    restart: unless-stopped
    networks: [devopstrack]

  # ───────────────────────── Prometheus ───────────────────────────────
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      metrics-service: { condition: service_started }
    ports: ["9090:9090"]
    restart: unless-stopped
    networks: [devopstrack]

  # ────────────────────────── Grafana ─────────────────────────────────
  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER:     admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS:         grafana-influxdb-flux-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prometheus: { condition: service_started }
      metrics-db: { condition: service_healthy }
    ports: ["3000:3000"]
    restart: unless-stopped
    networks: [devopstrack]

  # ─────────────────────────── Nexus 3 ────────────────────────────────
  nexus:
    image: sonatype/nexus3:3.70.0
    container_name: nexus
    ports:
      - "8081:8081"   # UI / API
      - "8083:8083"   # Registry Docker (HTTP)
    volumes:
      - nexus-data:/nexus-data
    environment:
      INSTALL4J_ADD_VM_PARAMS: >
        -Xms1g -Xmx2g -XX:MaxDirectMemorySize=2g
        -Djava.util.prefs.userRoot=/nexus-data/javaprefs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 30s
      retries: 10
    restart: unless-stopped
    networks: [devopstrack]

  # ───────────────────────── SonarQube ────────────────────────────────
  sonarqube:
    image: sonarqube:10.5-community
    container_name: sonarqube
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
    ports:
      - "9020:9000"
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/health"]
      interval: 30s
      retries: 10
    restart: unless-stopped
    networks: [devopstrack]

networks:
  devopstrack: {}

volumes:
  auth-db-data:     {}
  projects-data:    {}
  metrics-data:     {}
  grafana-data:     {}
  nexus-data:       {}
  sonarqube-data:   {}
  sonarqube-logs:   {}
  sonarqube-extensions: {}
