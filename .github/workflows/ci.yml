# .github/workflows/ci.yml
name: CI – DevOpsTrack

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  ORG: devopstrack
  REGISTRY: 127.0.0.1:8083          # IPv4 only – évite [::1] dans BuildKit

###############################################################################
# 1. Tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s --health-timeout=5s --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS: "-Xms1g -Xmx2g"
        ports: ["9000:9000"]
        # ❌ on vire le health‑check → GitHub ne bloque plus
        options: --shm-size 2g

    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      - uses: actions/setup-node@v4
        with: {node-version: 20}

      - run: cd frontend && npm ci
      - run: cd frontend && npm test --if-present

      - name: Wait Sonar & bootstrap
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl
          until curl -s http://localhost:9000/api/system/status | jq -r .status | grep -q UP; do
            echo "⏳  SonarQube starting…"; sleep 10; done
          curl -s -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=StrongPa55!"
          TOKEN=$(curl -s -u admin:StrongPa55! -d "name=ci" \
                   http://localhost:9000/api/user_tokens/generate | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          curl -s -u "$TOKEN": -X POST \
            "http://localhost:9000/api/projects/create?project=my-service&name=my-service" || true

      - uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# 2. Build & push des images Docker vers Nexus
###############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        service: [auth-service, projects-service, tasks-service, metrics-service]

    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      # 0️⃣ insecure‑registry → Docker daemon
      - name: Configure Docker daemon
        run: |
          echo '{ "insecure-registries": ["${{ env.REGISTRY }}"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # 1️⃣ Nexus container + repo docker‑hosted
      - name: Start Nexus & prepare registry
        run: |
          docker pull sonatype/nexus3:3.70.0
          docker run -d --name nexus \
            -p 8081:8081 -p 8083:8083 \
            -e INSTALL4J_ADD_VM_PARAMS="-Xms2g -Xmx3g" \
            -e NEXUS_SECURITY_RANDOMPASSWORD=false \
            sonatype/nexus3:3.70.0
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl netcat-openbsd
          for i in {1..60}; do
            docker logs nexus | grep -q "Started Sonatype Nexus" && break
            echo "⏳  Nexus boot ($i/60)"; sleep 10; done
          if ! docker logs nexus | grep -q "Started Sonatype Nexus"; then
            docker logs --tail 200 nexus; exit 1; fi

          cat > body.json <<JSON
          {
            "name": "docker-hosted",
            "online": true,
            "storage": {
              "blobStoreName": "default",
              "strictContentTypeValidation": true,
              "writePolicy": "ALLOW"
            },
            "docker": {
              "v1Enabled": false,
              "forceBasicAuth": true,
              "httpPort": 8083
            }
          }
          JSON
          curl -s -u admin:admin123 -H 'Content-Type: application/json' \
               -X POST http://127.0.0.1:8081/service/rest/v1/repositories/docker/hosted \
               -d @body.json || true

          # /v2/ ready ?
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://${{ env.REGISTRY }}/v2/ || true)
            echo "/v2/ -> $code ($i/40)"
            [[ $code == 200 || $code == 401 ]] && break
            sleep 5; done
          [[ $code == 200 || $code == 401 ]] || { echo "Registry down"; exit 1; }

          # Blob handler ready
          for i in {1..20}; do
            h=$(curl -s -I -o /dev/null -w '%{http_code}' \
                 http://${{ env.REGISTRY }}/v2/${{ env.ORG }}/test/blobs/sha256:deadbeef || true)
            echo "HEAD blob -> $h ($i/20)"
            [[ $h == 401 || $h == 404 ]] && break
            sleep 5; done
          [[ $h == 401 || $h == 404 ]] || { echo "Blob handler KO"; exit 1; }

      # 2️⃣ Buildx + login
      - uses: docker/setup-qemu-action@v3
        with: {platforms: linux/amd64}
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: admin123

      # 3️⃣ Build & push image du micro‑service
      - uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:latest
          cache-to: type=inline
