# ------------------------------------------------------------
# CI – DevOpsTrack
# ------------------------------------------------------------
name: CI – DevOpsTrack

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  ORG:       devopstrack
  REGISTRY:  127.0.0.1:8083      # IPv4 only

###############################################################################
# 1. Tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER:     sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB:       sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s --health-timeout=5s --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL:      jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS:        "-Xms1g -Xmx2g"
        ports:
          - "9000:9000"
        options: >-
          --shm-size 2g
          --health-cmd="curl -sf http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval=10s --health-timeout=10s --health-retries=60

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend deps
        run: cd frontend && npm ci

      - name: Run frontend tests
        run: cd frontend && npm test --if-present

      - name: Init Sonar (token + project)
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl

          echo "⏳  Waiting Sonar UP…"
          until curl -sf http://localhost:9000/api/system/status | jq -e '.status=="UP"'; do
            sleep 5
          done

          curl -s -u admin:admin \
            -X POST "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=StrongPa55!"

          SONAR_TOKEN=$(curl -s -u admin:StrongPa55! -d "name=ci" \
            http://localhost:9000/api/user_tokens/generate | jq -r .token)

          echo "SONAR_TOKEN=$SONAR_TOKEN" >> "$GITHUB_ENV"

          curl -s -u "$SONAR_TOKEN": -X POST \
            "http://localhost:9000/api/projects/create?project=my-service&name=my-service" || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN:    ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# 2. Build & Push Docker images vers Nexus
###############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      nexus:
        image: sonatype/nexus3:3.70.0
        env:
          INSTALL4J_ADD_VM_PARAMS: "-Xms2g -Xmx3g"
          NEXUS_SECURITY_RANDOMPASSWORD: "false"
        ports:
          - "8081:8081"
          - "8083:8083"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      ###################################################################
      # Autoriser l’insecure‑registry et redémarrer Docker
      ###################################################################
      - name: Configure Docker daemon
        run: |
          echo '{ "insecure-registries": ["${{ env.REGISTRY }}"] }' \
            | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      ###################################################################
      # Attendre Nexus & créer le repo docker‑hosted
      ###################################################################
      - name: Wait Nexus & prepare registry
        env:
          NEXUS_ID: ${{ job.services.nexus.id }}
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl

          echo "⏳  Waiting Nexus bootstrap…"
          until docker logs "$NEXUS_ID" 2>&1 | grep -q "Started Sonatype Nexus"; do
            sleep 10
          done

          cat > body.json <<'JSON'
          {
            "name": "docker-hosted",
            "online": true,
            "storage": {
              "blobStoreName": "default",
              "strictContentTypeValidation": true,
              "writePolicy": "ALLOW"
            },
            "docker": {
              "v1Enabled": false,
              "forceBasicAuth": true,
              "httpPort": 8083
            }
          }
          JSON

          curl -s -u admin:admin123 -H 'Content-Type: application/json' \
               -X POST http://localhost:8081/service/rest/v1/repositories/docker/hosted \
               -d @body.json || true

          echo "⏳  Waiting registry /v2/…"
          until curl -sf http://$REGISTRY/v2/ >/dev/null; do sleep 5; done
          echo "✅  Registry ready."

      ###################################################################
      # Build & push
      ###################################################################
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - uses: docker/setup-buildx-action@v3

      - name: Login to Nexus
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: admin123

      - name: Build & push images
        run: |
          set -e
          for svc in auth-service projects-service tasks-service metrics-service; do
            docker buildx build \
              --platform linux/amd64 \
              --push \
              --cache-to type=inline \
              -t $REGISTRY/$ORG/$svc:${{ github.sha }} \
              -t $REGISTRY/$ORG/$svc:latest \
              -f $svc/Dockerfile \
              $svc
          done
