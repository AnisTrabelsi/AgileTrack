name: "CI – DevOpsTrack (Sonar + Docker → Nexus)"

###############################################################################
# 🔔 Déclencheurs
###############################################################################
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

###############################################################################
# 🌐 Variables globales
###############################################################################
env:
  REGISTRY: localhost:8083   # URL de votre registry Nexus
  ORG: devopstrack           # Namespace / organisation

###############################################################################
# 🏗️ Job 1 : Qualité – build + tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest

    ###########################################################################
    # 🐳 Services Docker disponibles pendant le job
    ###########################################################################
    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9000:9000
        options: >-
          --shm-size 2g
          --health-cmd="curl -sf http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=60

    ###########################################################################
    # 🛠️ Étapes
    ###########################################################################
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install front deps
        run: |
          cd frontend
          npm ci

      - name: Lint + tests (front)
        run: |
          cd frontend
          npm test --if-present

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://sonarqube:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

##############################################################################
# 📦 Job 2 : Build & Push des images Docker sur Nexus (si qualité OK)
##############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          [ auth-service, projects-service, tasks-service, metrics-service ]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Nexus Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.NEXUS_USER }}
          password: ${{ secrets.NEXUS_PWD }}

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache,mode=max
