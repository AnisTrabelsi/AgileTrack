# .github/workflows/ci.yml
name: CI ‚Äì DevOpsTrack (Sonar + Docker ‚Üí Nexus)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ORG: devopstrack            # namespace des images pouss√©es

###############################################################################
# üèóÔ∏è  Job¬†1¬†: Qualit√© ‚Äì tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest

    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - "9000:9000"
        options: >-
          --shm-size 2g
          --health-cmd="curl -sf http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=60

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install frontend deps
        run: cd frontend && npm ci

      - name: Run frontend tests
        run: cd frontend && npm test --if-present

      - name: Bootstrap SonarQube (token + project)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq curl
          until [[ "$(curl -s http://localhost:9000/api/system/status | jq -r .status)" == "UP" ]]; do
            echo "‚è≥  Waiting for SonarQube‚Ä¶"; sleep 10; done
          curl -s -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=StrongPa55!"
          TOKEN=$(curl -s -u admin:StrongPa55! -X POST \
            -d "name=github-ci" http://localhost:9000/api/user_tokens/generate | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          curl -s -u "$TOKEN": -X POST \
            "http://localhost:9000/api/projects/create?project=my-service&name=my-service" \
            | jq .errors || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# üì¶  Job¬†2¬†: Build & Push des images Docker vers Nexus (jetable, sans secrets)
###############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest

    services:
      nexus:
        image: sonatype/nexus3:3.70.0
        ports:
          - "8081:8081"
          - "8083:8083"
        env:
          INSTALL4J_ADD_VM_PARAMS: "-Xms512m -Xmx512m"
          NEXUS_SECURITY_RANDOMPASSWORD: "false"
        options: >-
          --health-cmd="curl -f http://localhost:8081/"
          --health-interval=30s
          --health-retries=10

    env:
      REGISTRY: localhost:8083       # registre Docker expos√©

    strategy:
      matrix:
        service: [ auth-service, projects-service, tasks-service, metrics-service ]

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: docker/setup-qemu-action@v3
        with: { platforms: linux/amd64 }

      - uses: docker/setup-buildx-action@v3

      - name: Allow insecure registry localhost:8083
        run: |
          echo '{ "insecure-registries": ["localhost:8083"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Configure Nexus docker repo (hosted on 8083)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq curl netcat-openbsd jq
          until curl -sf http://localhost:8081/service/rest/v1/status > /dev/null; do
            echo "‚è≥  Nexus not ready yet‚Ä¶"; sleep 10; done

          JSON_PAYLOAD=$(printf '{"name":"create-docker-hosted","type":"groovy","content":"repository.createDockerHosted(\\u0027docker-hosted\\u0027,\\u0027http\\u0027,8083,null)"}')
          curl -s -u admin:admin123 -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            http://localhost:8081/service/rest/v1/script || true

          curl -s -u admin:admin123 -X POST \
            http://localhost:8081/service/rest/v1/script/create-docker-hosted/run || true

          until nc -z localhost 8083; do
            echo "‚è≥  Waiting for Docker repo on 8083‚Ä¶"; sleep 5; done
          echo "‚úÖ  Docker repo ready on localhost:8083"

      - name: Login to Nexus (admin/admin123)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: admin
          password: admin123

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache,mode=max
