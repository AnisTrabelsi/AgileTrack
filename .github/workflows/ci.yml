name: "CI – DevOpsTrack (Sonar + Docker → Nexus)"

###############################################################################
# 🔔 Déclencheurs
###############################################################################
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

###############################################################################
# 🌐 Variables globales
###############################################################################
env:
  # Adresse de ton registry Nexus (port 8083 configuré dans l’UI)
  REGISTRY: localhost:8083
  ORG: devopstrack          # Namespace dans Nexus

###############################################################################
# 🏗️ Job 1 : qualité (build + tests + SonarQube)
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────── 1. Checkout ───────────────────────────────
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0               # historique complet : meilleur pour Sonar

    # ─────────────────── 2. Exemples de build / tests frontend ──────────────
    # (Ajoute d’autres langages/étapes si nécessaire : Maven, Go, PyTest…)
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install front deps
      run: |
        cd frontend
        npm ci

    - name: Lint + tests (front)
      run: |
        cd frontend
        npm test --if-present

    # ─────────────────────────── 3. Analyse SonarQube ───────────────────────
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Adresse interne Docker de SonarQube référencée par le scanner
        SONAR_HOST_URL: "http://sonarqube:9000"
      with:
        projectBaseDir: "."          # Racine du dépôt
        args: >
          -Dsonar.projectKey=my-service
          -Dsonar.sources=.
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# 📦 Job 2 : Build & Push images sur Nexus (uniquement si quality = OK)
###############################################################################
  docker-build-push:
    needs: quality
    if: success()            # Exécute ce job seulement si le précédent réussit
    runs-on: ubuntu-latest

    # ── Matrice = un build par micro‑service (chemins = répertoires Dockerfile)
    strategy:
      matrix:
        service: [ auth-service, projects-service, tasks-service, metrics-service ]

    steps:
    # ─────────────────────────── 1. Checkout ────────────────────────────────
    - uses: actions/checkout@v4

    # ─────────────────────────── 2. Buildx & QEMU ───────────────────────────
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ──────────────────────── 3. Login to Nexus ─────────────────────────────
    - name: Login to Nexus Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.NEXUS_USER }}
        password: ${{ secrets.NEXUS_PWD }}

    # ──────────────────────── 4. Build + Push ───────────────────────────────
    - name: Build & Push Image – ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        platforms: linux/amd64        # ajoute linux/arm64 si besoin
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.service }}:latest
        # Cache (facultatif)
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache
        cache-to: |
          type=registry,ref=${{ env.REGISTRY }}/cache/${{ matrix.service }}:buildcache,mode=max
