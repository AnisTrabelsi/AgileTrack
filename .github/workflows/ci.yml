name: CI – DevOpsTrack

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ORG: devopstrack

###############################################################################
# 1 ▸ Tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS: "-Xms1g -Xmx2g"
        ports:
          - '9000:9000'
        options: >-
          --shm-size 2g
          --health-cmd="curl -sf http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=60

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install + tests (front)
        run: |
          cd frontend
          npm ci
          npm test --if-present

      - name: Wait Sonar, create token / project
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl
          until [[ "$(curl -s http://localhost:9000/api/system/status | jq -r .status)" == "UP" ]]; do sleep 10; done

          curl -s -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=StrongPa55!"

          TOKEN=$(curl -s -u admin:StrongPa55! -X POST -d "name=ci" \
                  http://localhost:9000/api/user_tokens/generate | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> "$GITHUB_ENV"

          curl -s -u "$TOKEN": -X POST \
            "http://localhost:9000/api/projects/create?project=my-service&name=my-service" || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# 2 ▸ Build & Push images Docker vers Nexus
###############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        service: [ auth-service, projects-service, tasks-service, metrics-service ]

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 0 ▸ Docker daemon : autoriser l’insecure registry
      - run: |
          echo '{ "insecure-registries":["localhost:8083"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # 1 ▸ Lancer Nexus + créer le repo docker‑hosted
      - name: Start Nexus & prepare registry
        run: |
          docker pull sonatype/nexus3:3.70.0
          docker run -d --name nexus \
            -p 8081:8081 -p 8083:8083 \
            -e INSTALL4J_ADD_VM_PARAMS="-Xms512m -Xmx1g" \
            -e NEXUS_SECURITY_RANDOMPASSWORD=false \
            sonatype/nexus3:3.70.0

          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl netcat-openbsd

          # attendre le boot complet
          for i in {1..60}; do
            docker logs nexus | grep -q "Started Sonatype Nexus" && break
            echo "Nexus boot ($i/60)"; sleep 10
          done || { docker logs --tail 200 nexus; exit 1; }

          # créer le dépôt docker‑hosted (idempotent)
          curl -sf -u admin:admin123 -H 'Content-Type: application/json' \
            -X POST http://localhost:8081/service/rest/v1/repositories/docker/hosted \
            -d @<(cat <<'JSON'
          {
            "name":"docker-hosted",
            "online":true,
            "storage":{"blobStoreName":"default","strictContentTypeValidation":true,"writePolicy":"ALLOW"},
            "docker":{"v1Enabled":false,"forceBasicAuth":true,"httpPort":8083}
          }
       JSON
          ) || true

      # 2 ▸ S’assurer que le registre est encore UP juste avant login
      - name: Wait for /v2/ (pre‑login)
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8083/v2/ || true)
            echo "/v2/ -> $code ($i/30)"
            [[ $code == 200 || $code == 401 ]] && exit 0
            # le conteneur a‑t‑il crashé ?
            if ! docker ps --filter "name=nexus" --filter "status=running" | grep -q nexus; then
              echo "⚠️  nexus n'est plus en RUNNING !"; docker logs --tail 100 nexus; exit 1
            fi
            sleep 5
          done
          echo "Timeout : registry toujours indisponible"; docker logs --tail 200 nexus; exit 1

      # 3 ▸ Tooling Docker
      - uses: docker/setup-qemu-action@v3
        with: { platforms: linux/amd64 }

      - uses: docker/setup-buildx-action@v3

      # 4 ▸ Login
      - uses: docker/login-action@v3
        with:
          registry: localhost:8083
          username: admin
          password: admin123

      # 5 ▸ Build & push (mono‑thread pour éviter l’OOM)
      - uses: docker/build-push-action@v5
        env:
          BUILDKIT_MAX_PARALLELISM: '1'
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false          # réduit l’empreinte mémoire
          tags: |
            localhost:8083/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
            localhost:8083/${{ env.ORG }}/${{ matrix.service }}:latest
          cache-to: type=inline
