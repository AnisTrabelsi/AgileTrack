# ------------------------------------------------------------
# CI ‚Äì DevOpsTrack
# 1) Tests + SonarCloud (frontend)
# 2) Build & Push images Docker ‚Üí GHCR
# ------------------------------------------------------------
name: CI - DevOpsTrack

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20

#################################################################
# 1) Qualit√© : tests + SonarCloud (frontend)
#################################################################
jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: üì¶ Install deps (frontend)
        working-directory: frontend
        run: npm ci

      - name: üß™ Run unit tests (frontend)
        run: npm --prefix frontend run --if-present test -- --coverage

      - name: üîç SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}

#################################################################
# 2) Build & push images vers GHCR
#################################################################
  docker-build-push:
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push'          # Pas de push depuis un PR
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          # service            context                        dockerfile
          - service: auth-service     # Django
            context: auth-service
            dockerfile: auth-service/Dockerfile
          - service: projects-service # FastAPI
            context: projects-service
            dockerfile: projects-service/Dockerfile
          - service: tasks-service    # Node
            context: tasks-service
            dockerfile: tasks-service/Dockerfile
          - service: metrics-service  # Go
            context: metrics-service
            dockerfile: metrics-service/Dockerfile
          - service: frontend         # React build + Nginx
            context: frontend
            dockerfile: frontend/Dockerfile

    steps:
      - uses: actions/checkout@v4

      - name: üêß Setup QEMU
        uses: docker/setup-qemu-action@v3
        with: { platforms: linux/amd64 }

      - name: üèóÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ‚Üí owner GHCR doit √™tre en minuscules
      - name: üìõ Compute lower‚Äëcase owner
        run: echo "OWNER_LC=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: üê≥ Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64           # cible unique (EKS)
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ matrix.service }}:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to:   type=gha,mode=max
