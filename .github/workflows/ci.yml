name: CI â€“ DevOpsTrack

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ORG: devopstrack

###############################################################################
# 1. Tests + analyse SonarQube
###############################################################################
jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    services:
      pg:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        options: >-
          --health-cmd="pg_isready -U sonar -d sonar"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      sonarqube:
        image: sonarqube:10.5-community
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://pg:5432/sonar
          SONAR_JDBC_USERNAME: sonar
          SONAR_JDBC_PASSWORD: sonar
          ES_JAVA_OPTS: "-Xms1g -Xmx2g"
        ports: [ "9000:9000" ]
        options: >-
          --shm-size 2g
          --health-cmd="curl -sf http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=60

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - run: cd frontend && npm ci
      - run: cd frontend && npm test --if-present

      - run: |
          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl
          until [[ "$(curl -s http://localhost:9000/api/system/status | jq -r .status)" == "UP" ]]; do sleep 10; done
          curl -s -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=StrongPa55!"
          TOKEN=$(curl -s -u admin:StrongPa55! -X POST \
            -d "name=ci" http://localhost:9000/api/user_tokens/generate | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          curl -s -u "$TOKEN": -X POST \
            "http://localhost:9000/api/projects/create?project=my-service&name=my-service" || true

      - uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=my-service
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

###############################################################################
# 2. Build & Push Docker images vers Nexus
###############################################################################
  docker-build-push:
    needs: quality
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        service: [ auth-service, projects-service, tasks-service, metrics-service ]

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - run: docker pull sonatype/nexus3:3.70.0

      - run: |
          docker run -d --name nexus -p 8081:8081 -p 8083:8083 \
            -e INSTALL4J_ADD_VM_PARAMS="-Xms1g -Xmx2g" \
            -e NEXUS_SECURITY_RANDOMPASSWORD=false \
            sonatype/nexus3:3.70.0

          sudo apt-get -qq update
          sudo apt-get -qq install --no-install-recommends jq curl netcat-openbsd

          for i in {1..60}; do
            if docker logs nexus 2>&1 | grep -q "Started Sonatype Nexus"; then
              echo "Nexus ready ($i/60)"; break
            fi
            echo "Waiting Nexus ($i/60)"
            sleep 20
          done
          if ! docker logs nexus 2>&1 | grep -q "Started Sonatype Nexus"; then
            docker logs --tail 200 nexus
            exit 1
          fi

          payload='{"name":"create-docker-hosted","type":"groovy","content":"repository.createDockerHosted(\"docker-hosted\",\"http\",8083,null)"}'
          curl -s -u admin:admin123 -H "Content-Type: application/json" \
               -d "$payload" -X POST http://localhost:8081/service/rest/v1/script || true
          curl -s -u admin:admin123 -X POST \
               http://localhost:8081/service/rest/v1/script/create-docker-hosted/run || true
          until nc -z localhost 8083; do sleep 5; done

      - uses: docker/setup-qemu-action@v3
        with: { platforms: linux/amd64 }
      - uses: docker/setup-buildx-action@v3

      - run: |
          echo '{ "insecure-registries":["localhost:8083"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - uses: docker/login-action@v3
        with:
          registry: localhost:8083
          username: admin
          password: admin123

      - uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            localhost:8083/${{ env.ORG }}/${{ matrix.service }}:${{ github.sha }}
            localhost:8083/${{ env.ORG }}/${{ matrix.service }}:latest
          cache-to: type=inline
